#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from mm.models import MeshModel
from mm.utils.opengl import Render
from mm.utils.mesh import generateFace, generateTexture, barycentricReconstruction, writePly

import cv2
import scipy.misc
import numpy as np
from skimage import io, img_as_float, img_as_ubyte
from skimage.transform import resize
import matplotlib.pyplot as plt

import os
import glob
import argparse


def saveImage(path, img):
    b,g,r = cv2.split(img)
    img = cv2.merge([r,g,b])
    img = img_as_ubyte(img)
    cv2.imwrite(path, img)

def main():
    # Change directory to the folder that holds the VRN data, OpenPose landmarks, and original images (frames) from the source video
    os.chdir('./data')

    # Load 3DMM
    m = MeshModel('../models/bfm2017.npz')
    
    # Set an orthographic projection for the camera matrix
    cam = 'orthographic'

    # load texture if set
    vertexImgColor = None
    if FLAGS.img_texture is not None:
        vertexImgColor = np.load(os.path.join(FLAGS.img_texture))

    data_path = os.path.join(FLAGS.input_dir, '*.png')
    keyframes = glob.glob(data_path)

    for i in range(FLAGS.start_frame, FLAGS.start_frame + 50):
        print(i)
        fNameImgOrig = os.path.join(FLAGS.input_dir, str(i) + '.png')

        # Load the source video frame and convert to 64-bit float
        b,g,r = cv2.split(cv2.imread(fNameImgOrig))
        img_org = cv2.merge([r,g,b])
        img_org = cv2.GaussianBlur(img_org, (3, 3), 0)
        img = img_as_float(img_org)

        # """
        # Rendering
        # """
        # load parameters
        frame_params = np.load(os.path.join(FLAGS.params_dir, str(i) + "_params.npy"))
        shCoef = frame_params[:27]
        param = frame_params[27:]

        # Generate 3DMM vertices from shape and similarity transform parameters
        vertexCoords = generateFace(np.r_[param[:-1], 0, param[-1]], m)

        # Generate the texture at the 3DMM vertices from the learned texture coefficients
        texParam = np.r_[np.zeros((m.numTex)), shCoef.flatten()]
        vertexImgColor = vertexImgColor*0 +0.7
        texture = generateTexture(vertexCoords, texParam, m, vertexImgColor)

        # Render the 3DMM
        # eyes = np.array([[2602,2731,2730],[2602,2603,2732],[2602,2732,2731],[2603,2604,2732],[2604,2733,2732],[2604,2734,2733],[2730,2859,2858],[2730,2731,2860],[2730,2860,2859],[2731,2732,2860],[2732,2861,2860],[2732,2733,2862],[2732,2862,2861],[2733,2734,2862],[2734,2863,2862],[2734,2864,2863],[2858,2859,2988],[2858,2988,2987],[2859,2860,2988],[2860,2989,2988],[2860,2861,2990],[2860,2990,2989],[2861,2862,2990],[2862,2991,2990],[2862,2863,2992],[2862,2992,2991],[2863,2864,2992],[2864,2993,2992],[2864,2994,2993],[2987,2988,3116],[2988,3117,3116],[2988,2989,3118],[2988,3118,3117],[2989,2990,3118],[2990,3119,3118],[2990,2991,3120],[2990,3120,3119],[2991,2992,3120],[2992,3121,3120],[2992,2993,3122],[2992,3122,3121],[2993,2994,3122],[2994,3123,3122],[2994,3124,3123],[3116,3245,3244],[3116,3117,3246],[3116,3246,3245],[3117,3118,3246],[3118,3247,3246],[3118,3119,3248],[3118,3248,3247],[3119,3120,3248],[3120,3249,3248],[3120,3121,3250],[3120,3250,3249],[3121,3122,3250],[3122,3251,3250],[3122,3123,3252],[3122,3252,3251],[3123,3124,3252],[3124,3253,3252],[3124,3254,3253],[3244,3373,3372],[3244,3245,3374],[3244,3374,3373],[3245,3246,3374],[3246,3375,3374],[3246,3247,3376],[3246,3376,3375],[3247,3248,3376],[3248,3377,3376],[3248,3249,3378],[3248,3378,3377],[3249,3250,3378],[3250,3379,3378],[3250,3251,3380],[3250,3380,3379],[3251,3252,3380],[3252,3381,3380],[3252,3253,3382],[3252,3382,3381],[3253,3254,3382],[3254,3383,3382],[3254,3384,3383],[3372,3373,3502],[3372,3502,3501],[3373,3374,3502],[3374,3503,3502],[3374,3375,3504],[3374,3504,3503],[3375,3376,3504],[3376,3505,3504],[3376,3377,3506],[3376,3506,3505],[3377,3378,3506],[3378,3507,3506],[3378,3379,3508],[3378,3508,3507],[3379,3380,3508],[3380,3509,3508],[3380,3381,3510],[3380,3510,3509],[3381,3382,3510],[3382,3511,3510],[3382,3383,3512],[3382,3512,3511],[3383,3384,3512],[3384,3513,3512],[3501,3502,3630],[3502,3631,3630],[3502,3503,3632],[3502,3632,3631],[3503,3504,3632],[3504,3633,3632],[3504,3505,3634],[3504,3634,3633],[3505,3506,3634],[3506,3635,3634],[3506,3507,3636],[3506,3636,3635],[3507,3508,3636],[3508,3637,3636],[3508,3509,3638],[3508,3638,3637],[3509,3510,3638],[3510,3639,3638],[3510,3511,3640],[3510,3640,3639],[3511,3512,3640],[3512,3641,3640],[3512,3513,3642],[3512,3642,3641],[3630,3631,3760],[3630,3760,3759],[3631,3632,3760],[3632,3761,3760],[3632,3633,3762],[3632,3762,3761],[3633,3634,3762],[3634,3763,3762],[3634,3635,3764],[3634,3764,3763],[3635,3636,3764],[3636,3765,3764],[3636,3637,3766],[3636,3766,3765],[3637,3638,3766],[3638,3767,3766],[3638,3639,3768],[3638,3768,3767],[3639,3640,3768],[3640,3769,3768],[3640,3641,3770],[3640,3770,3769],[3641,3642,3770],[3642,3771,3770],[3759,3760,3888],[3760,3889,3888],[3760,3761,3890],[3760,3890,3889],[3761,3762,3890],[3762,3891,3890],[3762,3763,3892],[3762,3892,3891],[3763,3764,3892],[3764,3893,3892],[3764,3765,3894],[3764,3894,3893],[3765,3766,3894],[3766,3895,3894],[3766,3767,3896],[3766,3896,3895],[3767,3768,3896],[3768,3897,3896],[3768,3769,3898],[3768,3898,3897],[3769,3770,3898],[3770,3899,3898],[3770,3771,3900],[3770,3900,3899],[3888,3889,4018],[3888,4018,4017],[3889,3890,4018],[3890,4019,4018],[3890,3891,4020],[3890,4020,4019],[3891,3892,4020],[3892,4021,4020],[3892,3893,4022],[3892,4022,4021],[3893,3894,4022],[3894,4023,4022],[3894,3895,4024],[3894,4024,4023],[3895,3896,4024],[3896,4025,4024],[3896,3897,4026],[3896,4026,4025],[3897,3898,4026],[3898,4027,4026],[3898,3899,4028],[3898,4028,4027],[3899,3900,4028],[3900,4029,4028],[4017,4018,4146],[4018,4147,4146],[4018,4019,4148],[4018,4148,4147],[4019,4020,4148],[4020,4149,4148],[4020,4021,4150],[4020,4150,4149],[4021,4022,4150],[4022,4151,4150],[4022,4023,4152],[4022,4152,4151],[4023,4024,4152],[4024,4153,4152],[4024,4025,4154],[4024,4154,4153],[4025,4026,4154],[4026,4155,4154],[4026,4027,4156],[4026,4156,4155],[4027,4028,4156],[4028,4157,4156],[4028,4029,4158],[4028,4158,4157],[4146,4147,4276],[4146,4276,4275],[4147,4148,4276],[4148,4277,4276],[4148,4149,4278],[4148,4278,4277],[4149,4150,4278],[4150,4279,4278],[4150,4151,4280],[4150,4280,4279],[4151,4152,4280],[4152,4281,4280],[4152,4153,4282],[4152,4282,4281],[4153,4154,4282],[4154,4283,4282],[4154,4155,4284],[4154,4284,4283],[4155,4156,4284],[4156,4285,4284],[4156,4157,4286],[4156,4286,4285],[4157,4158,4286],[4158,4287,4286],[4275,4276,4404],[4276,4405,4404],[4276,4277,4406],[4276,4406,4405],[4277,4278,4406],[4278,4407,4406],[4278,4279,4408],[4278,4408,4407],[4279,4280,4408],[4280,4409,4408],[4280,4281,4410],[4280,4410,4409],[4281,4282,4410],[4282,4411,4410],[4282,4283,4412],[4282,4412,4411],[4283,4284,4412],[4284,4413,4412],[4284,4285,4414],[4284,4414,4413],[4285,4286,4414],[4286,4415,4414],[4286,4287,4416],[4286,4416,4415],[4404,4405,4534],[4404,4534,4533],[4405,4406,4534],[4406,4535,4534],[4406,4407,4536],[4406,4536,4535],[4407,4408,4536],[4408,4537,4536],[4408,4409,4538],[4408,4538,4537],[4409,4410,4538],[4410,4539,4538],[4410,4411,4540],[4410,4540,4539],[4411,4412,4540],[4412,4541,4540],[4412,4413,4542],[4412,4542,4541],[4413,4414,4542],[4414,4543,4542],[4414,4415,4544],[4414,4544,4543],[4415,4416,4544],[4416,4545,4544],[4533,4534,4662],[4534,4663,4662],[4534,4535,4664],[4534,4664,4663],[4535,4536,4664],[4536,4665,4664],[4536,4537,4666],[4536,4666,4665],[4537,4538,4666],[4538,4667,4666],[4538,4539,4668],[4538,4668,4667],[4539,4540,4668],[4540,4669,4668],[4540,4541,4670],[4540,4670,4669],[4541,4542,4670],[4542,4671,4670],[4542,4543,4672],[4542,4672,4671],[4543,4544,4672],[4544,4673,4672],[4544,4545,4674],[4544,4674,4673],[4662,4663,4792],[4662,4792,4791],[4663,4664,4792],[4664,4793,4792],[4664,4665,4794],[4664,4794,4793],[4665,4666,4794],[4666,4795,4794],[4666,4667,4796],[4666,4796,4795],[4667,4668,4796],[4668,4797,4796],[4668,4669,4798],[4668,4798,4797],[4669,4670,4798],[4670,4799,4798],[4670,4671,4800],[4670,4800,4799],[4671,4672,4800],[4672,4801,4800],[4672,4673,4802],[4672,4802,4801],[4673,4674,4802],[4674,4803,4802],[4791,4792,4920],[4792,4921,4920],[4792,4793,4922],[4792,4922,4921],[4793,4794,4922],[4794,4923,4922],[4794,4795,4924],[4794,4924,4923],[4795,4796,4924],[4796,4925,4924],[4796,4797,4926],[4796,4926,4925],[4797,4798,4926],[4798,4927,4926],[4798,4799,4928],[4798,4928,4927],[4799,4800,4928],[4800,4929,4928],[4800,4801,4930],[4800,4930,4929],[4801,4802,4930],[4802,4931,4930],[4802,4803,4932],[4802,4932,4931],[4920,4921,5050],[4921,4922,5050],[4922,5051,5050],[4922,4923,5052],[4922,5052,5051],[4923,4924,5052],[4924,5053,5052],[4924,4925,5054],[4924,5054,5053],[4925,4926,5054],[4926,5055,5054],[4926,4927,5056],[4926,5056,5055],[4927,4928,5056],[4928,5057,5056],[4928,4929,5058],[4928,5058,5057],[4929,4930,5058],[4930,5059,5058],[4930,4931,5060],[4930,5060,5059],[4931,4932,5060],[4932,5061,5060],[5050,5051,5180],[5051,5052,5180],[5052,5181,5180],[5052,5053,5182],[5052,5182,5181],[5053,5054,5182],[5054,5183,5182],[5054,5055,5184],[5054,5184,5183],[5055,5056,5184],[5056,5185,5184],[5056,5057,5186],[5056,5186,5185],[5057,5058,5186],[5058,5187,5186],[5058,5059,5188],[5058,5188,5187],[5059,5060,5188],[5060,5189,5188],[5060,5061,5190],[5060,5190,5189],[5180,5181,5310],[5181,5182,5310],[5182,5311,5310],[5182,5183,5312],[5182,5312,5311],[5183,5184,5312],[5184,5313,5312],[5184,5185,5314],[5184,5314,5313],[5185,5186,5314],[5186,5315,5314],[5186,5187,5316],[5186,5316,5315],[5187,5188,5316],[5188,5317,5316],[5188,5189,5318],[5188,5318,5317],[5189,5190,5318],[5310,5311,5440],[5311,5312,5440],[5312,5441,5440],[5312,5313,5442],[5312,5442,5441],[5313,5314,5442],[5314,5443,5442],[5314,5315,5444],[5314,5444,5443],[5315,5316,5444],[5316,5445,5444],[5316,5317,5446],[5316,5446,5445],[5317,5318,5446],[5440,5441,5570],[5441,5442,5570],[5442,5571,5570],[5442,5443,5572],[5442,5572,5571],[5443,5444,5572],[5444,5573,5572],[5444,5445,5574],[5444,5574,5573],[5445,5446,5574],[10647,10776,10775],[10647,10648,10777],[10647,10777,10776],[10648,10649,10777],[10649,10778,10777],[10649,10650,10779],[10649,10779,10778],[10650,10651,10779],[10651,10780,10779],[10651,10781,10780],[10775,10904,10903],[10775,10776,10905],[10775,10905,10904],[10776,10777,10905],[10777,10906,10905],[10777,10778,10907],[10777,10907,10906],[10778,10779,10907],[10779,10908,10907],[10779,10780,10909],[10779,10909,10908],[10780,10781,10909],[10781,10910,10909],[10781,10911,10910],[10903,11032,11031],[10903,10904,11033],[10903,11033,11032],[10904,10905,11033],[10905,11034,11033],[10905,10906,11035],[10905,11035,11034],[10906,10907,11035],[10907,11036,11035],[10907,10908,11037],[10907,11037,11036],[10908,10909,11037],[10909,11038,11037],[10909,10910,11039],[10909,11039,11038],[10910,10911,11039],[10911,11040,11039],[10911,11041,11040],[11031,11160,11159],[11031,11032,11161],[11031,11161,11160],[11032,11033,11161],[11033,11162,11161],[11033,11034,11163],[11033,11163,11162],[11034,11035,11163],[11035,11164,11163],[11035,11036,11165],[11035,11165,11164],[11036,11037,11165],[11037,11166,11165],[11037,11038,11167],[11037,11167,11166],[11038,11039,11167],[11039,11168,11167],[11039,11040,11169],[11039,11169,11168],[11040,11041,11169],[11041,11170,11169],[11159,11288,11287],[11159,11160,11289],[11159,11289,11288],[11160,11161,11289],[11161,11290,11289],[11161,11162,11291],[11161,11291,11290],[11162,11163,11291],[11163,11292,11291],[11163,11164,11293],[11163,11293,11292],[11164,11165,11293],[11165,11294,11293],[11165,11166,11295],[11165,11295,11294],[11166,11167,11295],[11167,11296,11295],[11167,11168,11297],[11167,11297,11296],[11168,11169,11297],[11169,11298,11297],[11169,11170,11299],[11169,11299,11298],[11287,11288,11417],[11287,11417,11416],[11288,11289,11417],[11289,11418,11417],[11289,11290,11419],[11289,11419,11418],[11290,11291,11419],[11291,11420,11419],[11291,11292,11421],[11291,11421,11420],[11292,11293,11421],[11293,11422,11421],[11293,11294,11423],[11293,11423,11422],[11294,11295,11423],[11295,11424,11423],[11295,11296,11425],[11295,11425,11424],[11296,11297,11425],[11297,11426,11425],[11297,11298,11427],[11297,11427,11426],[11298,11299,11427],[11299,11428,11427],[11416,11417,11545],[11417,11546,11545],[11417,11418,11547],[11417,11547,11546],[11418,11419,11547],[11419,11548,11547],[11419,11420,11549],[11419,11549,11548],[11420,11421,11549],[11421,11550,11549],[11421,11422,11551],[11421,11551,11550],[11422,11423,11551],[11423,11552,11551],[11423,11424,11553],[11423,11553,11552],[11424,11425,11553],[11425,11554,11553],[11425,11426,11555],[11425,11555,11554],[11426,11427,11555],[11427,11556,11555],[11427,11428,11557],[11427,11557,11556],[11545,11546,11675],[11545,11675,11674],[11546,11547,11675],[11547,11676,11675],[11547,11548,11677],[11547,11677,11676],[11548,11549,11677],[11549,11678,11677],[11549,11550,11679],[11549,11679,11678],[11550,11551,11679],[11551,11680,11679],[11551,11552,11681],[11551,11681,11680],[11552,11553,11681],[11553,11682,11681],[11553,11554,11683],[11553,11683,11682],[11554,11555,11683],[11555,11684,11683],[11555,11556,11685],[11555,11685,11684],[11556,11557,11685],[11557,11686,11685],[11674,11675,11803],[11675,11804,11803],[11675,11676,11805],[11675,11805,11804],[11676,11677,11805],[11677,11806,11805],[11677,11678,11807],[11677,11807,11806],[11678,11679,11807],[11679,11808,11807],[11679,11680,11809],[11679,11809,11808],[11680,11681,11809],[11681,11810,11809],[11681,11682,11811],[11681,11811,11810],[11682,11683,11811],[11683,11812,11811],[11683,11684,11813],[11683,11813,11812],[11684,11685,11813],[11685,11814,11813],[11685,11686,11815],[11685,11815,11814],[11803,11804,11933],[11803,11933,11932],[11804,11805,11933],[11805,11934,11933],[11805,11806,11935],[11805,11935,11934],[11806,11807,11935],[11807,11936,11935],[11807,11808,11937],[11807,11937,11936],[11808,11809,11937],[11809,11938,11937],[11809,11810,11939],[11809,11939,11938],[11810,11811,11939],[11811,11940,11939],[11811,11812,11941],[11811,11941,11940],[11812,11813,11941],[11813,11942,11941],[11813,11814,11943],[11813,11943,11942],[11814,11815,11943],[11815,11944,11943],[11932,11933,12061],[11933,12062,12061],[11933,11934,12063],[11933,12063,12062],[11934,11935,12063],[11935,12064,12063],[11935,11936,12065],[11935,12065,12064],[11936,11937,12065],[11937,12066,12065],[11937,11938,12067],[11937,12067,12066],[11938,11939,12067],[11939,12068,12067],[11939,11940,12069],[11939,12069,12068],[11940,11941,12069],[11941,12070,12069],[11941,11942,12071],[11941,12071,12070],[11942,11943,12071],[11943,12072,12071],[11943,11944,12073],[11943,12073,12072],[12061,12062,12191],[12061,12191,12190],[12062,12063,12191],[12063,12192,12191],[12063,12064,12193],[12063,12193,12192],[12064,12065,12193],[12065,12194,12193],[12065,12066,12195],[12065,12195,12194],[12066,12067,12195],[12067,12196,12195],[12067,12068,12197],[12067,12197,12196],[12068,12069,12197],[12069,12198,12197],[12069,12070,12199],[12069,12199,12198],[12070,12071,12199],[12071,12200,12199],[12071,12072,12201],[12071,12201,12200],[12072,12073,12201],[12073,12202,12201],[12190,12191,12319],[12191,12320,12319],[12191,12192,12321],[12191,12321,12320],[12192,12193,12321],[12193,12322,12321],[12193,12194,12323],[12193,12323,12322],[12194,12195,12323],[12195,12324,12323],[12195,12196,12325],[12195,12325,12324],[12196,12197,12325],[12197,12326,12325],[12197,12198,12327],[12197,12327,12326],[12198,12199,12327],[12199,12328,12327],[12199,12200,12329],[12199,12329,12328],[12200,12201,12329],[12201,12330,12329],[12201,12202,12331],[12201,12331,12330],[12319,12320,12449],[12319,12449,12448],[12320,12321,12449],[12321,12450,12449],[12321,12322,12451],[12321,12451,12450],[12322,12323,12451],[12323,12452,12451],[12323,12324,12453],[12323,12453,12452],[12324,12325,12453],[12325,12454,12453],[12325,12326,12455],[12325,12455,12454],[12326,12327,12455],[12327,12456,12455],[12327,12328,12457],[12327,12457,12456],[12328,12329,12457],[12329,12458,12457],[12329,12330,12459],[12329,12459,12458],[12330,12331,12459],[12331,12460,12459],[12448,12449,12577],[12449,12578,12577],[12449,12450,12579],[12449,12579,12578],[12450,12451,12579],[12451,12580,12579],[12451,12452,12581],[12451,12581,12580],[12452,12453,12581],[12453,12582,12581],[12453,12454,12583],[12453,12583,12582],[12454,12455,12583],[12455,12584,12583],[12455,12456,12585],[12455,12585,12584],[12456,12457,12585],[12457,12586,12585],[12457,12458,12587],[12457,12587,12586],[12458,12459,12587],[12459,12588,12587],[12459,12460,12589],[12459,12589,12588],[12577,12578,12707],[12577,12707,12706],[12578,12579,12707],[12579,12708,12707],[12579,12580,12709],[12579,12709,12708],[12580,12581,12709],[12581,12710,12709],[12581,12582,12711],[12581,12711,12710],[12582,12583,12711],[12583,12712,12711],[12583,12584,12713],[12583,12713,12712],[12584,12585,12713],[12585,12714,12713],[12585,12586,12715],[12585,12715,12714],[12586,12587,12715],[12587,12716,12715],[12587,12588,12717],[12587,12717,12716],[12588,12589,12717],[12589,12718,12717],[12706,12707,12835],[12707,12836,12835],[12707,12708,12837],[12707,12837,12836],[12708,12709,12837],[12709,12838,12837],[12709,12710,12839],[12709,12839,12838],[12710,12711,12839],[12711,12840,12839],[12711,12712,12841],[12711,12841,12840],[12712,12713,12841],[12713,12842,12841],[12713,12714,12843],[12713,12843,12842],[12714,12715,12843],[12715,12844,12843],[12715,12716,12845],[12715,12845,12844],[12716,12717,12845],[12717,12846,12845],[12717,12718,12847],[12717,12847,12846],[12835,12836,12965],[12836,12837,12965],[12837,12966,12965],[12837,12838,12967],[12837,12967,12966],[12838,12839,12967],[12839,12968,12967],[12839,12840,12969],[12839,12969,12968],[12840,12841,12969],[12841,12970,12969],[12841,12842,12971],[12841,12971,12970],[12842,12843,12971],[12843,12972,12971],[12843,12844,12973],[12843,12973,12972],[12844,12845,12973],[12845,12974,12973],[12845,12846,12975],[12845,12975,12974],[12846,12847,12975],[12965,12966,13095],[12966,12967,13095],[12967,13096,13095],[12967,12968,13097],[12967,13097,13096],[12968,12969,13097],[12969,13098,13097],[12969,12970,13099],[12969,13099,13098],[12970,12971,13099],[12971,13100,13099],[12971,12972,13101],[12971,13101,13100],[12972,12973,13101],[12973,13102,13101],[12973,12974,13103],[12973,13103,13102],[12974,12975,13103],[13095,13096,13225],[13095,13225,13224],[13096,13097,13225],[13097,13226,13225],[13097,13098,13227],[13097,13227,13226],[13098,13099,13227],[13099,13228,13227],[13099,13100,13229],[13099,13229,13228],[13100,13101,13229],[13101,13230,13229],[13101,13102,13231],[13101,13231,13230],[13102,13103,13231],[13224,13225,13353],[13225,13354,13353],[13225,13226,13355],[13225,13355,13354],[13226,13227,13355],[13227,13356,13355],[13227,13228,13357],[13227,13357,13356],[13228,13229,13357],[13229,13358,13357],[13229,13230,13359],[13229,13359,13358],[13230,13231,13359],[13353,13354,13483],[13354,13355,13483],[13355,13484,13483],[13355,13356,13485],[13355,13485,13484],[13356,13357,13485],[13357,13486,13485],[13357,13358,13487],[13357,13487,13486],[13358,13359,13487],[13483,13484,13613],[13484,13485,13613],[13485,13614,13613],[13485,13486,13615],[13485,13615,13614],[13486,13487,13615]])
        # masked_face = []
        # eyes_id = []
        # for fi, f in enumerate(m.face):
        #     if f in eyes:
        #         eyes_id.append(fi)
        #     else:
        #         masked_face.append(f)

        masked_face = np.asarray(m.face)
        #writePly(os.path.join(FLAGS.output_dir, "textured_mesh.ply"), vertexCoords, masked_face, texture)

        renderObj = Render(img.shape[1], img.shape[0], np.r_[vertexCoords.T, texture.T], masked_face, False, img)
        renderObj.render()
        # rendering = renderObj.grabRendering()
        rendering, pixelCoord, pixelFaces, pixelBarycentricCoords = renderObj.grabRendering(return_info = True)
        renderObj.closeRender()

        # # CPU rendering
        # Using the barycentric parameters from the rendering, we can reconstruct the image with the 3DMM texture model by taking barycentric combinations of the 3DMM RGB values defined at the vertices
        # imgReconstruction = barycentricReconstruction(texture, pixelFaces, pixelBarycentricCoords, m.face)
        # # Put values from the reconstruction into a (height, width, 3) array for plotting
        # reconstruction = img
        # reconstruction[pixelCoord[:, 0], pixelCoord[:, 1], :] = imgReconstruction
        # # print(img[pixelCoord[:, 0], pixelCoord[:, 1]])
        # # print(imgReconstruction)

        saveImage(os.path.join(FLAGS.output_dir, str(i) + ".png"), rendering)



if __name__ == "__main__":

    parser = argparse.ArgumentParser(description = 'Render fitted parameters')
    parser.add_argument('--input_dir', help = 'Path to images')
    parser.add_argument('--params_dir', help = 'Path to fitted expression & light parameters')
    parser.add_argument('--output_dir', help = 'Output directory')
    parser.add_argument('--img_texture', help = 'Path to texture (vertex space) instead of PCA model (optional)')
    parser.add_argument('--start_frame', help = 'Frame to start tracking from (optional)',type = int, default = 0)

    FLAGS, unparsed = parser.parse_known_args()

    main()